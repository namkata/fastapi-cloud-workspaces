name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Backend Testing and Linting
  backend-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-github-actions" >> $GITHUB_ENV
        echo "ENVIRONMENT=test" >> $GITHUB_ENV
        echo "DEBUG=true" >> $GITHUB_ENV

    - name: Run linting with flake8
      working-directory: ./backend
      run: |
        flake8 app tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run type checking with mypy
      working-directory: ./backend
      run: |
        mypy app --ignore-missing-imports

    - name: Run security checks with bandit
      working-directory: ./backend
      run: |
        bandit -r app -f json -o bandit-report.json || true
        bandit -r app

    - name: Run tests with pytest
      working-directory: ./backend
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          ./backend/coverage.xml
          ./backend/htmlcov/
          ./backend/bandit-report.json

  # Frontend Testing and Linting (if frontend exists)
  frontend-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check if frontend exists
      id: check-frontend
      run: |
        if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Set up Node.js
      if: steps.check-frontend.outputs.exists == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      if: steps.check-frontend.outputs.exists == 'true'
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend linting
      if: steps.check-frontend.outputs.exists == 'true'
      working-directory: ./frontend
      run: npm run lint

    - name: Run frontend type checking
      if: steps.check-frontend.outputs.exists == 'true'
      working-directory: ./frontend
      run: npm run type-check

    - name: Run frontend tests
      if: steps.check-frontend.outputs.exists == 'true'
      working-directory: ./frontend
      run: npm run test:coverage

    - name: Build frontend
      if: steps.check-frontend.outputs.exists == 'true'
      working-directory: ./frontend
      run: npm run build

    - name: Upload frontend coverage
      if: steps.check-frontend.outputs.exists == 'true'
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build and Test
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: fastapi-cloud-workspaces-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-backend \
          -e DATABASE_URL=sqlite:///./test.db \
          -e SECRET_KEY=test-secret \
          -p 8000:8000 \
          fastapi-cloud-workspaces-backend:test

        # Wait for container to start
        sleep 10

        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1

        # Stop container
        docker stop test-backend

  # Integration Tests
  integration-test:
    runs-on: ubuntu-latest
    needs: [backend-test, docker-build]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: integration_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run integration tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/integration_test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: integration-test-secret-key
        ENVIRONMENT: test
      run: |
        pytest tests/test_integration_api.py -v --tb=short

  # Performance Tests
  performance-test:
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: Run performance tests
      working-directory: ./backend
      run: |
        # Start the application in background
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        APP_PID=$!

        # Wait for app to start
        sleep 10

        # Run basic load test
        locust -f tests/performance/locustfile.py --headless -u 10 -r 2 -t 30s --host http://localhost:8000 || true

        # Stop the application
        kill $APP_PID

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan, docker-build, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    environment:
      name: production
      url: https://your-app-domain.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/backend:latest
          ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to production
      run: |
        echo "Deployment step would go here"
        echo "This could include:"
        echo "- Updating Kubernetes manifests"
        echo "- Deploying to cloud provider"
        echo "- Running database migrations"
        echo "- Updating load balancer configuration"

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan, docker-build, integration-test]
    if: always()

    steps:
    - name: Notify on success
      if: ${{ needs.backend-test.result == 'success' && needs.docker-build.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
        # Add notification logic here (Slack, Discord, email, etc.)

    - name: Notify on failure
      if: ${{ needs.backend-test.result == 'failure' || needs.docker-build.result == 'failure' }}
      run: |
        echo "❌ Some tests failed!"
        # Add notification logic here (Slack, Discord, email, etc.)
